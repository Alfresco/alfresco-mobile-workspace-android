buildscript {
    repositories {
        google()
        gradlePluginPortal()
    }
    dependencies {
        classpath libs.android.gradle
        classpath libs.kotlin.gradle

        classpath libs.objectbox

        classpath libs.google.services.gradle
        classpath libs.firebase.crashlytics.gradle

        classpath libs.spotless
        classpath libs.gradleVersionsPlugin
        classpath libs.gradleLicensePlugin
        classpath 'com.github.dcendents:android-maven-gradle-plugin:2.1'
    }
}

allprojects {
    repositories {
        maven {
            url "https://artifacts.alfresco.com/nexus/content/groups/public-snapshots"
            content { includeGroup "com.alfresco.android" }
        }
        google()
        mavenCentral()
        maven {
            url "https://jitpack.io"
            content { includeGroup "com.github.chrisbanes" }
        }
        maven { url "https://jitpack.io" }
    }
}

static def dependencyToString(dependency) {
    return "${dependency.module}:${dependency.versionConstraint.requiredVersion}"
}

subprojects {
    afterEvaluate {
        if(it.hasProperty('android')) {
            android {
                compileSdkVersion 32

                defaultConfig {
                    minSdkVersion 24
                    targetSdkVersion 32
                }
                compileOptions {
                    sourceCompatibility JavaVersion.VERSION_1_8
                    targetCompatibility JavaVersion.VERSION_1_8
                }
                sourceSets['main'].java.srcDir('src/main/kotlin')

                configurations.all {
                    resolutionStrategy {
                        // Force kotlin-reflect version until Moshi is updated
                        force dependencyToString(libs.kotlin.reflect.get())
                        // Force Guava version until ExoPlayer is updated
                        force dependencyToString(libs.guava.get())
                        // Don't cache changing modules at all
                        cacheChangingModulesFor 0, 'seconds'
                    }
                }
            }
        }
    }

    apply from: "$project.rootDir/config/spotless.gradle"

    tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
        kotlinOptions {
            // Treat all Kotlin warnings as errors
            // allWarningsAsErrors = true

            // Enable experimental coroutines APIs, including Flow
            freeCompilerArgs += "-Xopt-in=kotlinx.coroutines.ExperimentalCoroutinesApi"
            freeCompilerArgs += "-Xopt-in=kotlinx.coroutines.FlowPreview"

            // Enable experimental Stdlib
            freeCompilerArgs += "-Xopt-in=kotlin.ExperimentalStdlibApi"

            freeCompilerArgs += "-Xopt-in=kotlin.RequiresOptIn"

            // Set JVM target to 1.8
            jvmTarget = "1.8"
        }
    }
}

apply from: "$rootDir/config/versions.gradle"