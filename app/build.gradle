apply plugin: 'com.android.application'

apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'

apply plugin: 'com.google.gms.google-services'
apply plugin: 'com.google.firebase.crashlytics'

android {
    defaultConfig {
        applicationId "com.alfresco.content.app"
        versionCode envOrDef('VERSION_CODE', '1') as Integer
        versionName "1.6.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    signingConfigs {
        playStore {
            storeFile file(envOrDef('KEYSTORE_FILE', 'keystore.jks'))
            storePassword envOrDef('KEYSTORE_PASSWORD', '')
            keyAlias envOrDef('KEY_ALIAS', '')
            keyPassword envOrDef('KEY_PASSWORD', '')
        }
    }

    buildTypes {
        debug {
            applicationIdSuffix ".debug"
        }

        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }

        playStore {
            initWith release
            matchingFallbacks = ['release']
            signingConfig signingConfigs.playStore
        }
    }

    dexOptions {
        jumboMode = true
        javaMaxHeapSize "12g"
    }

    buildFeatures {
        dataBinding = true
        viewBinding = true
    }

    compileOptions {
        coreLibraryDesugaringEnabled true
    }

    // Temporary kotlin module duplication fix
    packagingOptions {
        pickFirst 'META-INF/auth_release.kotlin_module'
    }
}

project.afterEvaluate {
    def gservices_cfg = envOrDef('GOOGLE_SERVICES_FILE', 'none')
    if (file("${gservices_cfg}").exists()) {
        println "Copying ${gservices_cfg} into ${projectDir}/google-services.json"
        copy {
            from file("${gservices_cfg}")
            into file("${projectDir}")
            rename '(.*)', 'google-services.json'
        }
    } else {
        println "Using dummy ${projectDir}/google-services.json"
    }
}

dependencies {
    implementation project(':base')
    implementation project(':base-ui')
    implementation project(':account')
    implementation project(':session')
    implementation project(':auth')
    implementation project(':common')
    implementation project(':actions')
    implementation project(':download')
    implementation project(':listview')
    implementation project(':browse')
    implementation project(':search')
    implementation project(':viewer')
    implementation project(':shareextension')
    implementation project(':move')

    implementation project(':data')
    implementation libs.alfresco.content

    implementation libs.kotlin.stdlib

    implementation libs.androidx.appcompat
    implementation libs.androidx.core
    implementation libs.androidx.preference

    implementation libs.androidx.navigation.fragment
    implementation libs.androidx.navigation.ui

    implementation libs.androidx.lifecycle.process

    implementation libs.google.material

    implementation libs.mavericks

    implementation libs.coil.core
    implementation libs.gson

    coreLibraryDesugaring libs.android.desugar

    playStoreImplementation libs.firebase.analytics
    playStoreImplementation libs.firebase.crashlytics.core
    playStoreImplementation libs.google.playservices.basement

    // Testing
    testImplementation libs.junit
    androidTestImplementation libs.androidx.test.core
    androidTestImplementation libs.androidx.test.espresso.core
}

static Object envOrDef(String varName, Object defaultValue) {
    return System.getenv(varName) ?: defaultValue
}

apply from: "$rootDir/config/licenseInventory.gradle"
