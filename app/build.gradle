import com.alfresco.buildsrc.Libs

apply plugin: 'com.android.application'

apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'

apply plugin: 'com.google.gms.google-services'
apply plugin: 'com.google.firebase.crashlytics'

android {
    defaultConfig {
        applicationId "com.alfresco.content.app"
        versionCode envOrDef('VERSION_CODE', '1') as Integer
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    signingConfigs {
        playStore {
            storeFile file(envOrDef('KEYSTORE_FILE', 'keystore.jks'))
            storePassword envOrDef('KEYSTORE_PASSWORD', '')
            keyAlias envOrDef('KEY_ALIAS', '')
            keyPassword envOrDef('KEY_PASSWORD', '')
        }
    }

    buildTypes {
        debug {
            applicationIdSuffix ".debug"
        }

        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }

        playStore {
            initWith release
            matchingFallbacks = ['release']
            signingConfig signingConfigs.playStore
        }
    }

    buildFeatures {
        dataBinding = true
        viewBinding = true
    }

    compileOptions {
        coreLibraryDesugaringEnabled true
    }

    // Temporary kotlin module duplication fix
    packagingOptions {
        pickFirst 'META-INF/auth_release.kotlin_module'
    }
}

project.afterEvaluate {
    def gservices_cfg = envOrDef('GOOGLE_SERVICES_FILE', 'none')
    if (file("${gservices_cfg}").exists()) {
        println "Copying ${gservices_cfg} into ${projectDir}/google-services.json"
        copy {
            from file("${gservices_cfg}")
            into file("${projectDir}")
            rename '(.*)', 'google-services.json'
        }
    } else {
        println "Using dummy ${projectDir}/google-services.json"
    }
}

dependencies {
    implementation project(':base-ui')
    implementation project(':account')
    implementation project(':session')
    implementation project(':auth')
    implementation project(':common')
    implementation project(':actions')
    implementation project(':download')
    implementation project(':listview')
    implementation project(':browse')
    implementation project(':search')
    implementation project(':viewer')

    implementation project(':data')
    implementation Libs.Alfresco.content

    implementation Libs.Kotlin.stdlib

    implementation Libs.AndroidX.appcompat
    implementation Libs.AndroidX.coreKtx
    implementation Libs.AndroidX.preference

    implementation Libs.AndroidX.Navigation.fragment
    implementation Libs.AndroidX.Navigation.ui

    implementation Libs.AndroidX.Lifecycle.process

    implementation Libs.Google.material

    implementation Libs.mvRx

    implementation Libs.Coil.core

    coreLibraryDesugaring Libs.AndroidTools.desugar

    debugImplementation Libs.leakCanary

    playStoreImplementation Libs.Google.Firebase.analytics
    playStoreImplementation Libs.Google.Firebase.crashlytics

    // Testing
    testImplementation Libs.junit
    androidTestImplementation Libs.AndroidX.Test.core
    androidTestImplementation Libs.AndroidX.Test.espressoCore
}

static Object envOrDef(String varName, Object defaultValue) {
    return System.getenv(varName) ?: defaultValue
}
